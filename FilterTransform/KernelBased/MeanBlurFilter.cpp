/**
 * @class MeanBlurFilter
 * @brief Mean Blur Filter kernel implementation.
 */
#include "MeanBlurFilter.h"

/**
 * @brief Construct a new Gaussian Blur Filter:: Gaussian Blur Filter object
 * 
 * @param size Size/Radius of the kernel matrix.
 * @param parent Passed to AbstractKernelBasedImageFilterTransform() constructor.
 */
MeanBlurFilter::MeanBlurFilter(int size, QObject* parent) : AbstractKernelBasedImageFilterTransform(size, parent)
{
    setKernel(size);
}

/**
 * @brief Gets new image after filter applied.
 * 
 * @param image Original image to get new filter applied image.
 * @param size Size/radius of the kernel.
 * @return QImage Filter applied image.
 */
QImage MeanBlurFilter::applyFilter(const QImage &image, int size, double)
{
    setSize(size);
    setKernel(size);
    return convolution(image);
}

/**
 * @brief This is an overloaded function.
 * 
 * @param image Original image to get new filter applied image.
 * @param size Size/radius of the kernel.
 * @return QImage Filter applied image.
 */
QImage MeanBlurFilter::applyFilter(const QImage &image, int size)
{
    return applyFilter(image, size, 1.0);
}

/**
 * @brief Returns the name of the filter.
 * 
 * @return QString Name of the filter.
 */
QString MeanBlurFilter::getName() const
{
    return "Mean Blur Filter";
}

/**
 * @brief Construct an mean blur kernel with radius size.
 *
 * An identity kernel with a dimension ( size * 2 - 1) * ( size * 2 - 1) is constructed.
 * The weight of each entry in the kernel is generated by the 1/(size+1)^2
 *
 * @param size Size/radius of the kernel.
 */
void MeanBlurFilter::setKernel(int size, double)
{
    redefineKernel(size);
    for (int dx = -size + 1; dx < size; ++dx)
        for (int dy = -size + 1; dy < size; ++dy) {
            setEntry(dx, dy, 1.0 / (size + 1) * (size + 1));               // set the entry to be 1/(size+1)^2
    }                                                                      // if size is 2, the kernel would be 3x3, from 2*size -1
}
